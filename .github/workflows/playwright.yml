name: Playwright Tests

on:
  push:
    branches: [main, master, e2e-workout]
  pull_request:
    branches: [main, master, e2e-workout]

jobs:
  test:
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: üì¶ Install Dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci && npm install --save-dev cross-env

      - name: üìÑ Create .env file for Backend
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" > backend/.env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> backend/.env
          echo "NODE_ENV=test" >> backend/.env
          echo "CORS_ORIGIN=http://localhost:5173" >> backend/.env

      - name: üöÄ Start Backend
        working-directory: backend
        run: |
          export NODE_ENV=test
          export PORT=3000
          export DEBUG=app:*
          nohup npm start > backend.log 2>&1 &
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            if curl -s http://localhost:3000/ > /dev/null; then
              echo "Backend started successfully"
              break
            fi
            echo "Waiting... $i/30"
            sleep 2
          done

      - name: üå± Create Test User
        run: |
          sleep 5
          curl -X POST http://localhost:3000/api/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"Test123!"}' || echo "User may already exist"
          # Verify login
          response=$(curl -s -X POST http://localhost:3000/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"Test123!"}')
          echo "API Login Response: $response"

      - name: üöÄ Start Frontend
        working-directory: frontend
        run: |
          npm run build
          nohup npx vite preview --host 0.0.0.0 --port 5173 > frontend.log 2>&1 &
          echo "Waiting for frontend to start..."
          for i in {1..15}; do
            if curl -s http://localhost:5173/ > /dev/null; then
              echo "Frontend started successfully"
              break
            fi
            echo "Waiting... $i/15"
            sleep 2
          done

      - name: üîç Check Frontend & Backend
        run: |
          echo "Checking backend health..."
          backend_response=$(curl -s http://localhost:3000/ || echo "Failed to connect")
          echo "Backend response: $backend_response"
          
          echo "Checking frontend..."
          frontend_response=$(curl -s http://localhost:5173/ || echo "Failed to connect")
          if echo "$frontend_response" | grep -q "<html"; then
            echo "Frontend is running and returned HTML"
          else
            echo "‚ö†Ô∏è Frontend response issues"
            echo "$frontend_response" | head -n 20
          fi

      - name: üß™ Install Playwright
        run: |
          npx playwright install chromium
          npx playwright install-deps chromium

      - name: üîÑ Run Playwright Tests with Debug
        run: |
          # Create debug script to modify the test
          cat > debug-test.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const testPath = path.join(process.cwd(), 'e2e-tests/workout.spec.js');
          let content = fs.readFileSync(testPath, 'utf8');
          
          // Add debug logging
          content = content.replace('test.beforeEach(async ({ page }) => {', 
            `test.beforeEach(async ({ page }) => {
              // Enable verbose logging
              page.on('request', request => console.log(\`‚Üí \${request.method()} \${request.url()}\`));
              page.on('response', response => console.log(\`‚Üê \${response.status()} \${response.url()}\`));
            `);
          
          // Add longer timeout
          content = content.replace('await expect(page).toHaveURL("http://localhost:5173/dashboard")',
            'await page.waitForTimeout(1000); console.log("After login click"); await expect(page).toHaveURL("http://localhost:5173/dashboard", { timeout: 30000 })');
          
          fs.writeFileSync(testPath, content);
          console.log('Test file updated with debug info');
          EOF
          
          node debug-test.js
          # Run with headless: true explicitly set
          PLAYWRIGHT_HEADLESS=true npx playwright test workout.spec.js --workers=1 --retries=2 --timeout=60000

      - name: üì§ Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
          retention-days: 14

      - name: üì§ Upload Logs on Failure
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            backend/backend.log
            frontend/frontend.log
            test-results/
          retention-days: 7