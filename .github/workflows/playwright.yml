name: Playwright Tests

on:
  push:
    branches: [main, master, e2e-workout]
  pull_request:
    branches: [main, master, e2e-workout]

jobs:
  test:
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: 📂 Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci && npm install --save-dev cross-env

      - name: 📄 Create .env file for Backend
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" > backend/.env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> backend/.env
          echo "NODE_ENV=production" >> backend/.env

      - name: 🌱 Seed Database (Ensure Test Data Exists)
        working-directory: backend
        run: |
          if [ -f src/db/holos.db ]; then
            echo "✅ Database already exists, skipping creation..."
          else
            echo "🆕 Database does not exist. Seeding now..."
            node src/db/seed.js
          fi
          
          echo "📋 Checking database content:"
          sqlite3 src/db/holos.db "SELECT * FROM users;" || echo "⚠️ No users found in database."

      - name: 🌍 Start the Backend
        working-directory: backend
        run: |
          export NODE_ENV=production
          export PORT=3000
          export HOST=0.0.0.0
          nohup npm start > backend.log 2>&1 &
          sleep 15  # Increased wait time for backend initialization

      - name: 🔍 Check Backend Health
        run: |
          echo "🔍 Checking if backend is running..."
          ps aux | grep node
          
          echo "🔍 Listing backend log content:"
          cat backend/backend.log || echo "⚠️ No backend logs found"

          echo "🔍 Checking backend availability..."
          for i in {1..15}; do
            ROOT_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/)
            if [[ "$ROOT_RESPONSE" != "000" ]]; then
              echo "✅ Backend server is running!"
              break
            else
              echo "⏳ Waiting for backend to start... (Attempt $i/15)"
              sleep 5
            fi
            if [[ $i -eq 15 ]]; then
              echo "❌ Backend server failed to start!"
              exit 1
            fi
          done
          
          echo "🔍 Checking API endpoints..."
          curl -v http://localhost:3000/api/ || echo "⚠️ API base endpoint check (this may 404 normally)"
          
          echo "✅ Backend health check completed - server is responsive"

      - name: 🚀 Start Frontend
        working-directory: frontend
        run: |
          npm run build
          nohup npx vite preview --host 0.0.0.0 --port 5173 > frontend.log 2>&1 &
          sleep 15

      - name: 🔍 Check Frontend Health
        run: |
          echo "🔍 Checking if frontend is running..."
          for i in {1..15}; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5173/)
            if [[ "$RESPONSE" == "200" ]]; then
              echo "✅ Frontend is responding correctly!"
              break
            else
              echo "⏳ Frontend not ready (Status: $RESPONSE), retrying in 5s..."
              sleep 5
            fi
            if [[ $i -eq 15 ]]; then
              echo "❌ Frontend server failed to start!"
              exit 1
            fi
          done

      - name: 🔍 Debug Logs Before Testing
        run: |
          echo "🔍 Backend logs:"
          cat backend/backend.log || echo "⚠️ No backend logs found"
          echo "🔍 Frontend logs:"
          cat frontend/frontend.log || echo "⚠️ No frontend logs found"
          echo "🌐 Service status summary:"
          curl -s -o /dev/null -w "Backend status: %{http_code}\n" http://localhost:3000/ || echo "⚠️ Backend not reachable"
          curl -s -o /dev/null -w "Frontend status: %{http_code}\n" http://localhost:5173/ || echo "⚠️ Frontend not reachable"

      - name: 🧪 Install Playwright Chromium Only
        run: npx playwright install chromium

      - name: 🔄 Run Playwright Tests (With Retries & Extended Timeout)
        run: |
          npx playwright test --workers=2 --retries=2 --timeout=30000

      - name: 📤 Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: 📤 Upload Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            backend/backend.log
            frontend/frontend.log
          retention-days: 7
